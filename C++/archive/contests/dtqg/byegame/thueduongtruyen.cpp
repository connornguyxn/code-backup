#if DEBUG
    #include "lib/include/debug.h"
    #pragma GCC optimize("trapv")
    #define TASK "test"
#else
    #pragma GCC optimize("O3,unroll-loops,inline")
    #pragma GCC target("avx2")
    #include <bits/stdc++.h>
    #define db(...)
    #define TASK "thueduongtruyen"
#endif
using namespace std;
#define ll long long
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<long long, long long>
#define fi first
#define se second
#define str string
#define nl '\n'
#define sp ' '
#define mask(POS) (1ULL << (POS))
#define bitcnt(MASK) __builtin_popcountull(MASK)
#define getbit(MASK, POS) ((MASK >> POS) & 1)
#define all(VAR) (VAR).begin(), (VAR).end()
#define point(CNT) fixed << showpoint << setprecision(CNT)
const int MAXN = 1e6;
const ull MOD = 1e9 + 7;

// https://imgur.com/NyJUUbV.png
// https://imgur.com/9zhHovV.png
// graph

void minimize(ll &a, ll b) {
    a = min(a, b);
}

void solve() {
    int n;
    cin >> n;
    
    vector<ll> u(n + 1), v(n + 1), w(n + 1);
    for (int i = 1; i <= n - 1; i++) {
        cin >> u[i];
    };
    for (int i = 1; i <= n - 1; i++) {
        cin >> v[i];
    };
    for (int i = 1; i <= n; i++) {
        cin >> w[i];
    };
    
    vector<vector<vector<ll>>> dp(2, vector<vector<ll>>(n + 1, vector<ll>(2, 0x3f3f3f3f)));
    dp[0][1][0] = 0;
    dp[1][1][w[1] % 2] = w[1];
    
    for (int i = 2; i <= n; i++) {
        for (int j = 0; j < 2; j++) {
            minimize(
                dp[0][i][(j + u[i - 1] + v[i - 1]) % 2],
                dp[0][i - 1][j] + u[i - 1] + v[i - 1]
            );
            
            minimize(
                dp[1][i][(j + u[i - 1] + v[i - 1]) % 2],
                dp[1][i - 1][j] + u[i - 1] + v[i - 1]
            );
            
            minimize(
                dp[0][i][(j + u[i - 1]) % 2],
                dp[1][i - 1][j] + u[i - 1]
            );
            
            minimize(
                dp[0][i][(j + v[i - 1]) % 2],
                dp[1][i - 1][j] + v[i - 1]
            );
            
            minimize(
                dp[1][i][(j + u[i - 1] + w[i]) % 2],
                dp[1][i - 1][j] + u[i - 1] + w[i]
            );
            
            minimize(
                dp[1][i][(j + v[i - 1] + w[i]) % 2],
                dp[1][i - 1][j] + v[i - 1] + w[i]
            );
            
            minimize(
                dp[1][i][(j + u[i - 1] + v[i - 1] + w[i]) % 2],
                dp[0][i - 1][j] + u[i - 1] + v[i - 1] + w[i]
            );
            
            minimize(
                dp[1][i][(j + u[i - 1] + v[i - 1] + w[i]) % 2],
                dp[1][i - 1][j] + u[i - 1] + v[i - 1] + w[i]
            );
        };
    };
    
    cout << dp[1][n][0] << nl;
}
///////////////////////////////////////
int main() {
    if (fopen(TASK".inp", "r")) freopen(TASK".inp", "r", stdin);
    if (fopen(TASK".out", "r")) freopen(TASK".out", "w", stdout);
    cin.tie(0) -> sync_with_stdio(0);
    /////////////////
    int tc;
    cin >> tc;
    while (tc--) {
        solve();
    };
    
    /////////////////
    return 0;
}
/*
000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000
0000000000000000000000000000000000001111.............1111111000000000000000000000000000000
00000000000000000000000000000000011.. .....11111111.........111000000000000000000000000000
000000000000000000000000000000011.  .1111111111111111111111.. .110000000000000000000000000
0000000000000000000000000000001. ..111111111111111111111111111. .1100000000000000000000000
000000000000000000000000000001. .111111111111111111111111111111. .110000000000000000000000
00000000000000000000000000001. .111111.............11111111111111. .1000000000000000000000
00000000000000000000000000001  111.   ..............   ...11111111. .100000000000000000000
0000000000000000000000000001. .11.  ..11111111111111111..  .1111111. .10000000000000000000
0000000000000000000000000001  111. ..11111111111111111111.  .1111111. .1000000000000000000
000000000000000000000000001. .111.  ..1111111111111111111.. .11111111. .100000000000000000
000000000000000000000000001. 11111.   ...11111111111111...  .11111111. .100000000000000000
000000000000000000000000011 .1111111..   ..............   .11111111111. 110000000000000000
00000000000000000000000001. .1111111111.................11111111111111. .10000000000000000
00000000000000000000000001 .1111111111111111111111111111111111111111111  10000000000000000
0000000000000000000000001. .1111111111111111111111111111111111111111111. .1000000000000000
0000000000000000000000001. 11111111111111111111111111111111111111111111. .1000000000000000
000000000000000000000001. .11111111111111111111111111111111111111111111. .1000000000000000
000000000000000000000001. .111111111111111111111111111111111111111111111 .1000000000000000
000000000000000000000011 .1111111111111111111111111111111111111111111111 .1000000000000000
00000000000000000000001. .1111111111111111111111111111111111111111111111. 1000000000000000
00000000000000000000001. 11111111111111111111111111111111111111111111111. 1000000000000000
0000000000000000000001. .11111111111111111111111111111111111111111111111. 1100000000000000
0000000000000000000001. .11111111111111111111111111111111111111111111111. 1100000000000000
0000000000000000000011 .111111111111111111111111111111111111111111111111. 1100000000000000
000000000000000000001. .111111111111111111111111111111111111111111111111. 1100000000000000
000000000000000000001 .1111111111111111111111111111111111111111111111111  1000000000000000
00000000000000000001. .1111111111111111111111111111111111111111111111111 .1000000000000000
00000000000000000001. 11111111111111111111.........11111111111111111111. .1000000000000000
0000000000000000001. .111111111111................... .1111111111111111. .1000000000000000
0000000000000000001. .111111111....111111111111111111. .111111111111111. .1000000000000000
0000000000000000011 .111111111. .100000000000000000001  111111111111111. .1000000000000000
000000111111111111. .111111111. .100000000000000000001  111111111111111. .1000000000000000
00111...............11111111111 .100000000000000000001 .111111111111111. .1000000000000000
001. ..111111111111111111111111. 110000000000000000001  111111111111111. .1000000000000000
001. 11111111111111111111111111. .10000000000000000001  111111111111111. .1000000000000000
001. .1111111111111111111111111. .10000000000000000001 .111111111111111. .1000000000000000
00011. ..11111111111111111111..  .1000000000111111111. .111111111111111 .10000000000000000
0000011.. ................. ...11100000111........... ..11111111111111. .10000000000000000
0000000111111...........111111000000011. ...11111111111111111111111111  110000000000000000
00000000000000000000000000000000000001. .111111111111111111111111111.  .100000000000000000
000000000000000000000000000000000000011. .11111111111111111111111.. ..11000000000000000000
00000000000000000000000000000000000000111.. ......111111111.... ...11000000000000000000000
00000000000000000000000000000000000000000111111...............1111000000000000000000000000
000000000000000000000000000000000000000000000000011111111111100000000000000000000000000000
*/